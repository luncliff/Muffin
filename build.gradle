import java.nio.file.Paths

// todo: https://medium.com/@nhancv/android-publish-library-project-to-nexus-repository-manager-5f2bd2711600
// todo: https://developer.android.com/studio/build/dependencies#google-maven
// todo: https://getstream.io/blog/publishing-libraries-to-mavencentral-2021/
repositories {
    google()
    mavenCentral()
    // maven { url "https://jitpack.io" }
}

def vcpkg_root = Paths.get(System.getenv("VCPKG_ROOT")).toAbsolutePath()
def vcpkg_toolchain_file = Paths.get(vcpkg_root.toString(), "scripts", "buildsystems", "vcpkg.cmake")
println("Using vcpkg: ${vcpkg_toolchain_file}")

def ndk_root = Paths.get(System.getenv("ANDROID_NDK_HOME")).toAbsolutePath()
def ndk_toolchain_file = Paths.get(ndk_root.toString(), "build", "cmake", "android.toolchain.cmake")
println("Using NDK: ${ndk_toolchain_file}")

apply plugin: "com.android.library"
android {
    // buildToolsVersion "32.0.0"
    compileSdk 32
    compileOptions {
        // coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    ndkVersion "23.1.7779620"
    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            testCoverageEnabled true
        }
        release {
            jniDebuggable true
            minifyEnabled true
        }
    }
    defaultConfig {
        minSdkVersion       26
        targetSdkVersion    32
        // https://developer.android.com/studio/build/configure-apk-splits#configure-abi-split
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86_64"
        }
        // https://blog.mikepenz.dev/a/lib-version-name
        // buildConfigField "String", "VERSION_NAME", "\"1.2.0\""
        externalNativeBuild {
            cmake {
                cppFlags    "-Wall", "-Wextra", "-fno-rtti"
                arguments   "-DANDROID_STL=c++_shared"
                arguments   "-DBUILD_SHARED_LIBS=true"
                arguments   "-DCMAKE_TOOLCHAIN_FILE=${vcpkg_toolchain_file}"
                arguments   "-DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=${ndk_toolchain_file}"
                targets     "muffin"
            }
        }
        // https://github.com/mannodermaus/android-junit5
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument "runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder"
    }
    externalNativeBuild {
        cmake {
            version "3.21.0+"
            path    "CMakeLists.txt"
        }
    }
    sourceSets {
        main.setRoot("android")
        main {
            manifest.srcFile "android/AndroidManifest.xml"
        }
        androidTest.setRoot("android/test")
        androidTest {
            java.srcDir "android/test"
            assets.srcDir "android/testAssets"
        }
    }
    // https://developer.android.com/studio/build/native-dependencies?hl=en
    buildFeatures {
        buildConfig = true
        prefab true
        prefabPublishing true
    }
    prefab {
        muffin.headers "include"
    }
    packagingOptions {
        // pickFirst "jniLibs/**/*.so"
        exclude "META-INF/LICENSE*" // JUnit 5 will bundle in files
    }
    // https://developer.android.com/training/testing/unit-testing/instrumented-unit-tests
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            failFast = false
            testLogging {
                events "passed", "skipped", "failed"
                showStandardStreams = true
                showCauses = true
                showExceptions = true
                showStackTraces = true
                exceptionFormat = "full"
            }
        }
    }
}

// https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_configurations_graph
dependencies {
    // https://www.geeksforgeeks.org/desugaring-in-android/
    // coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:1.1.5"
    api group: "androidx.core", name: "core", version: "1.7.0"
    // https://developer.android.com/training/testing/set-up-project#android-test-dependencies
    androidTestImplementation   group: "androidx.test",     name: "core",   version: "1.4.0"
    androidTestImplementation   group: "androidx.test",     name: "rules",  version: "1.4.0"
    androidTestImplementation   group: "androidx.test",     name: "runner", version: "1.4.0"
    androidTestImplementation   group: "androidx.test.ext", name: "junit",  version: "1.1.3"
    androidTestImplementation   group: "org.junit.jupiter", name: "junit-jupiter-api",      version: "5.7.1"
    androidTestImplementation   group: "org.junit.jupiter", name: "junit-jupiter-params",   version: "5.7.1"
    androidTestRuntimeOnly      group: "org.junit.jupiter", name: "junit-jupiter-engine",   version: "5.7.1"
    androidTestImplementation   group: "de.mannodermaus.junit5", name: "android-test-core",     version: "1.2.2"
    androidTestRuntimeOnly      group: "de.mannodermaus.junit5", name: "android-test-runner",   version: "1.2.2"
}

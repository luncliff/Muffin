//
//  Author:  github.com/luncliff (luncliff@gmail.com)
//
import java.nio.file.Paths
buildscript {
    repositories {
        google()
        mavenCentral()
        // jcenter() // see https://github.com/gradle/gradle/issues/16018
    }
    dependencies {
        // https://developer.android.com/studio/releases/gradle-plugin#4-0-0
        // expect Gradle 6.7.1+
        classpath("com.android.tools.build:gradle:4.1.3")
        // https://github.com/mannodermaus/android-junit5
        classpath("de.mannodermaus.gradle.plugins:android-junit5:1.7.1.1")
        // classpath("org.jacoco:org.jacoco.core:0.8.5")
    }
}

// todo: https://medium.com/@nhancv/android-publish-library-project-to-nexus-repository-manager-5f2bd2711600
// todo: https://developer.android.com/studio/build/dependencies#google-maven
// todo: https://getstream.io/blog/publishing-libraries-to-mavencentral-2021/
repositories {
    google()
    mavenCentral()
    maven { url "https://jitpack.io" }
}

println "Project: ${project.buildDir}"

def vcpkg_root = Paths.get(System.getenv("VCPKG_ROOT")).toAbsolutePath()
def vcpkg_toolchain_file = Paths.get(vcpkg_root.toString(), "scripts", "buildsystems", "vcpkg.cmake")
println("Using vcpkg: ${vcpkg_toolchain_file}")

def ndk_root = Paths.get(System.getenv("ANDROID_NDK_HOME")).toAbsolutePath()
def ndk_toolchain_file = Paths.get(ndk_root.toString(), "build", "cmake", "android.toolchain.cmake")
println("Using NDK: ${ndk_toolchain_file}")

// apply plugin: "org.sonarqube"

// https://snowdeer.github.io/android/2019/07/04/how-to-use-jacoco-plugin/
// https://blog.gouline.net/code-coverage-on-android-with-jacoco-92ec90c9355e
// apply plugin: "jacoco"
// jacoco {
//     toolVersion = "0.8.5"
// }

apply plugin: "com.android.library"
android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    ndkVersion "22.1.7171670" // or "21.3.6528147"
    // https://developer.android.com/studio/build/configure-apk-splits#configure-abi-split
    splits {
        abi {
            enable true
            reset()
            include "armeabi-v7a", "arm64-v8a", "x86_64"
            exclude "armeabi"
        }
    }
    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            testCoverageEnabled true
        }
        release {
            jniDebuggable true
            minifyEnabled true
        }
    }
    defaultConfig {
        minSdkVersion       28
        targetSdkVersion    30
        // https://blog.mikepenz.dev/a/lib-version-name
        // buildConfigField "String", "VERSION_NAME", "\"1.1.3\""
        externalNativeBuild {
            cmake {
                cppFlags    "-Wall", "-Wextra", "-fno-rtti", "-fno-exceptions"
                arguments   "-DANDROID_STL=c++_shared"
                arguments   "-DBUILD_SHARED_LIBS=true"
                arguments   "-DCMAKE_TOOLCHAIN_FILE=${vcpkg_toolchain_file}"
                arguments   "-DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=${ndk_toolchain_file}"
                targets     "muffin"
            }
        }
        // https://github.com/mannodermaus/android-junit5
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument "runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder"
    }
    externalNativeBuild {
        cmake {
            version "3.13.0+"
            path    "CMakeLists.txt"
        }
    }
    sourceSets {
        main.setRoot("android")
        main {
            manifest.srcFile "android/AndroidManifest.xml"
        }
        androidTest.setRoot("android/test")
        androidTest {
            java.srcDir "android/test"
            assets.srcDir "android/testAssets"
        }
        // https://developer.android.com/studio/releases/gradle-plugin#cmake-imported-targets
        main.jniLibs.srcDirs = ["jniLibs"]
        androidTest.jniLibs.srcDirs = ["android/jniLibs"]
    }
    buildFeatures {
        buildConfig = true
        prefab true
        prefabPublishing true
    }
    prefab {
        muffin {
            headers "include"
        }
    }
    packagingOptions {
        // pickFirst "jniLibs/**/*.so"
        exclude "META-INF/LICENSE*" // JUnit 5 will bundle in files
    }
    // https://developer.android.com/training/testing/unit-testing/instrumented-unit-tests
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            failFast = false
            testLogging {
                events "passed", "skipped", "failed"
                showStandardStreams = true
                showCauses = true
                showExceptions = true
                showStackTraces = true
                exceptionFormat = "full"
            }
        }
    }
}

// https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_configurations_graph
dependencies {
    api "androidx.core:core:1.5.0" // todo: add "androidx.core:core-ktx:1.5.0"
    api "androidx.camera:camera-core:1.0.0"
    api "androidx.camera:camera-camera2:1.0.0"
    api "androidx.camera:camera-lifecycle:1.0.0"
    // https://www.geeksforgeeks.org/desugaring-in-android/
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:1.1.5"
    // https://developer.android.com/training/testing/set-up-project#android-test-dependencies
    androidTestImplementation   group: "androidx.test",     name: "core",   version: "1.3.0"
    androidTestImplementation   group: "androidx.test",     name: "rules",  version: "1.3.0"
    androidTestImplementation   group: "androidx.test",     name: "runner", version: "1.3.0"
    androidTestImplementation   group: "androidx.test.ext", name: "junit",  version: "1.1.2"
    androidTestImplementation   group: "org.junit.jupiter", name: "junit-jupiter-api",      version: "5.7.1"
    androidTestImplementation   group: "org.junit.jupiter", name: "junit-jupiter-params",   version: "5.7.1"
    androidTestRuntimeOnly      group: "org.junit.jupiter", name: "junit-jupiter-engine",   version: "5.7.1"
    androidTestImplementation   group: "de.mannodermaus.junit5", name: "android-test-core",     version: "1.2.2"
    androidTestRuntimeOnly      group: "de.mannodermaus.junit5", name: "android-test-runner",   version: "1.2.2"
}

// !!! This is WIP. Not working example !!!
// https://developer.android.com/studio/build/maven-publish-plugin
// https://docs.gradle.org/current/userguide/publishing_maven.html
apply plugin: "maven-publish"
afterEvaluate {
    publishing {
        repositories {
            maven {
                url = "https://.../content/repositories/snapshots/"
                credentials {
                    username = System.getenv("PUBLISH_USERNAME")
                    password = System.getenv("PUBLISH_PASSWORD")
                }
            }
        }
        // https://docs.oracle.com/middleware/1212/core/MAVEN/maven_version.htm
        publications {
            // for AAR, use components.variant
            release(MavenPublication) {
                from components.release
                groupId = "org.luncliff"
                version = "1.1.3-SNAPSHOT"
                artifactId = "muffin"
            }
            debug(MavenPublication) {
                from components.debug
                groupId = "org.luncliff"
                version = "1.1.3-SNAPSHOT"
                artifactId = "muffin-debug"
            }
        }
    }
}

// ---------------------------------------------------------------------------
//
//  Author
//      luncliff@gmail.com
//
// ---------------------------------------------------------------------------

buildscript {    
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.4'
    }
}

repositories {
    google()
    jcenter()
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion 27

    // Target ABI
    //  - This option controls target platform of module
    //  - The platform might not supported by the compiler
    //    some can work with Clang(default), but some can work only with GCC...
    //    if bad, both toolchains might not support it
    splits {
        abi {
            // disable all
            enable true
            universalApk true 
            reset()
            // Build for multiple platform, like...
            include "armeabi-v7a",  "arm64-v8a", "x86_64"
        }
    }

    defaultConfig {
        minSdkVersion 24        // Minimum SDK
        targetSdkVersion 27

        // Follow native code's verson
        versionCode 2
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // External Native build: CMake
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared"
            }
        }
    }
    // External Native build
    //  - using Gradle's CMake plugin
    //  - Give path to CMake
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    
    // Pick first one from duplicated shared objects.
    // https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.PackagingOptions.html
    // https://stackoverflow.com/questions/44342455/more-than-one-file-was-found-with-os-independent-path-meta-inf-license
    packagingOptions {
        pickFirst 'lib/**'
    }

    // Custom SourceSet
    //  - Source path/directory for Gradle
    sourceSets {
        // Command: gradle assemble
        main.setRoot('android')
        main {
            manifest.srcFile 'android/AndroidManifest.xml'
        }

        // Command: gradle connectedAndroidTest
        androidTest.setRoot('android/test')
        androidTest {
            java.srcDir 'android/test'
            assets.srcDir 'android/test/assets'
        }
        // If ABI includes `armeabi-v7a`, the following directory MUST exists.
        //      `android/jniLibs/armeabi-v7a`
        //      `libs/armeabi-v7a`
        // The library files in there will be installed automatically
        main.jniLibs.srcDirs = ['android/jniLibs', 'libs']
        androidTest.jniLibs.srcDirs = ['android/jniLibs', 'libs']
    }

    testOptions {
        unitTests.all {
            // All the usual Gradle options.
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }
        }
    } 
}

assemble.doLast
{
    // Instead of `ninja install`, Gradle will deploy the files. 
    copy {
        from 'build/intermediates/cmake/debug/obj'
        into 'install/libs/Debug'
    }
    copy {
        from 'build/intermediates/cmake/release/obj'
        into 'install/libs/Release'
    }

    copy {
        from 'build/outputs/aar'
        into 'install/aar'
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'

    implementation 'org.jetbrains:annotations-java5:15.0'
}

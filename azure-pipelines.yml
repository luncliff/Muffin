
trigger:
  branches:
    exclude:
      - docs
      - gh-pages

schedules:
  - cron: "0 3 * * 0"
    displayName: "Weekly Build"
    branches:
      include:
        - master
    always: true

variables:
  VCPKG_FEATURE_FLAGS: "versions,manifests,registries,binarycaching"
  GRADLE_USER_HOME: $(Pipeline.Workspace)/.gradle

jobs:
  - job: build_gradle
    pool:
      vmImage: "macOS-latest"
    variables:
      VCPKG_ROOT: "/usr/local/share/vcpkg" # check $VCPKG_INSTALLATION_ROOT
      VCPKG_DEFAULT_BINARY_CACHE: /usr/local/share/vcpkg/archives
      ANDROID_NDK_HOME: "/Users/runner/Library/Android/sdk/ndk/22.1.7171670" # see scripts/azure-pipelines.sh, check $ANDROID_SDK_ROOT
    steps:
      - checkout: self
      - powershell: |
          brew install ninja
          brew install tree
        displayName: "Setup: Homebrew"
      - powershell: |
          Push-Location ${VCPKG_ROOT}
            mkdir -p ${VCPKG_DEFAULT_BINARY_CACHE}
            Push-Location triplets/community
              wget https://raw.githubusercontent.com/luncliff/vcpkg-registry/0.2210.0/triplets/arm64-android.cmake
              wget https://raw.githubusercontent.com/luncliff/vcpkg-registry/0.2210.0/triplets/arm-android.cmake
              wget https://raw.githubusercontent.com/luncliff/vcpkg-registry/0.2210.0/triplets/x64-android.cmake
            Pop-Location
            tree -L 2 $(pwd)/triplets
          Pop-Location
        displayName: "Setup: Vcpkg"
      - bash: ./scripts/azure-pipelines.sh
        displayName: "Setup: Android SDK / AVD"
      - bash: |
          echo "cmake.dir=$(dirname $(which cmake))" >> local.properties
        displayName: "Setup: local.properties"
      - task: Cache@2
        inputs:
          key: 'vcpkg-android | "$(Agent.OS)"'
          path: $(VCPKG_DEFAULT_BINARY_CACHE)
          restoreKeys: |
            vcpkg-android | "$(Agent.OS)"
            $(Agent.OS)
        displayName: "Cache: Vcpkg"
      - task: Cache@2
        inputs:
          key: 'gradle | "$(Agent.OS)"'
          path: $(GRADLE_USER_HOME)
          restoreKeys: |
            gradle | "$(Agent.OS)"
            $(Agent.OS)
        displayName: "Cache: Gradle"
      - powershell: gradle wrapper
        displayName: "Gradle: wrapper"
      - task: Gradle@2
        inputs:
          gradleWrapperFile: "gradlew"
          publishJUnitResults: false
          gradleOptions: "-Xmx3072m"
          tasks: "androidDependencies"
          options: "--info"
        displayName: "Gradle: androidDependencies"
      - task: Gradle@2
        inputs:
          gradleWrapperFile: "gradlew"
          publishJUnitResults: false
          checkStyleRunAnalysis: true
          gradleOptions: "-Xmx3072m"
          tasks: "assembleDebug"
          options: "--info"
        displayName: "Gradle: assembleDebug"
      - task: Gradle@2
        inputs:
          gradleWrapperFile: "gradlew"
          publishJUnitResults: false
          checkStyleRunAnalysis: true
          gradleOptions: "-Xmx3072m"
          tasks: "assemble"
          options: "--warning-mode all"
        displayName: "Gradle: assemble"
      - task: CopyFiles@2
        inputs:
          contents: "$(Build.SourcesDirectory)/build/outputs/aar/*.aar"
          targetFolder: "$(build.artifactStagingDirectory)"
      - task: PublishBuildArtifacts@1
      - task: Gradle@2
        inputs:
          gradleWrapperFile: "gradlew"
          publishJUnitResults: true
          testResultsFiles: '**/TEST-*.xml'
          tasks: "connectedAndroidTest createDebugCoverageReport"
        displayName: "Gradle: connectedAndroidTest"
